{"version":3,"sources":["shaders/PortalMaterial.js","components/Model.js","shaders/FireflyMaterial.js","components/Fireflies.js","App.js","index.js"],"names":["PortalMaterial","_THREE$ShaderMaterial","_inherits","_super","_createSuper","_classCallCheck","call","uniforms","uTime","value","uColorStart","THREE","uColorEnd","vertexShader","fragmentShader","_createClass","key","get","this","set","v","extend","Model","props","portalMaterial","useRef","bakedTexture","useTexture","nodes","useGLTF","useFrame","state","delta","current","time","_jsxs","_objectSpread","dispose","children","_jsx","geometry","portalCircle","position","rotation","Math","PI","ref","blending","colorStart","colorEnd","lampLightL","scale","lampLightR","baked","map","preload","FireflyMaterial","uColor","uPixelRatio","min","window","devicePixelRatio","uSize","Fireflies","_ref","_ref$count","count","shader","_useMemo","useMemo","positionArray","Float32Array","scaleArray","i","random","toArray","_useMemo2","_slicedToArray","attachObject","array","itemSize","transparent","depthWrite","App","Suspense","fallback","Canvas","dpr","camera","fov","attach","args","OrbitControls","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb3f89cb.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport { extend } from '@react-three/fiber'\nimport glsl from 'babel-plugin-glsl/macro'\n\nexport default class PortalMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        uTime: { value: 0 },\n        uColorStart: { value: new THREE.Color('hotpink') },\n        uColorEnd: { value: new THREE.Color('white') },\n      },\n      vertexShader: `\n      varying vec2 vUv;\n      void main() {\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        vec4 viewPosition = viewMatrix * modelPosition;\n        vec4 projectionPosition = projectionMatrix * viewPosition;\n        gl_Position = projectionPosition;\n        vUv = uv;\n      }\n      `,\n      fragmentShader: glsl`\n      #pragma glslify: cnoise3 = require(glsl-noise/classic/3d.glsl) \n      uniform float uTime;\n      uniform vec3 uColorStart;\n      uniform vec3 uColorEnd;\n      varying vec2 vUv;\n      void main() {\n        vec2 displacedUv = vUv + cnoise3(vec3(vUv * 7.0, uTime * 0.1));\n        float strength = cnoise3(vec3(displacedUv * 5.0, uTime * 0.2));\n        float outerGlow = distance(vUv, vec2(0.5)) * 4.0 - 1.4;\n        strength += outerGlow;\n        strength += step(-0.2, strength) * 0.8;\n        strength = clamp(strength, 0.0, 1.0);\n        vec3 color = mix(uColorStart, uColorEnd, strength);\n        gl_FragColor = vec4(color, 1.0);\n      }\n      `,\n    })\n  }\n\n  get time() {\n    return this.uniforms.uTime.value\n  }\n\n  set time(v) {\n    this.uniforms.uTime.value = v\n  }\n\n  get colorStart() {\n    return this.uniforms.uColorStart.value\n  }\n\n  get colorEnd() {\n    return this.uniforms.uColorEnd.value\n  }\n}\n\nextend({ PortalMaterial })\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nAuthor: Bruno Simon <https://threejs-journey.com>\n*/\n\nimport * as THREE from 'three'\nimport { useRef } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport { useFrame } from '@react-three/fiber'\nimport '../shaders/PortalMaterial'\n\nexport default function Model(props) {\n  const portalMaterial = useRef()\n  const bakedTexture = useTexture('/baked-02.jpeg')\n  const { nodes } = useGLTF('/portal-2.glb')\n  useFrame((state, delta) => (portalMaterial.current.time += delta))\n  return (\n    <group {...props} dispose={null}>\n      {/* Circle for the portal */}\n      <mesh geometry={nodes.portalCircle.geometry} position={[0, 0.78, 1.6]} rotation={[-Math.PI / 2, 0, 0]}>\n        <portalMaterial ref={portalMaterial} blending={THREE.AdditiveBlending} colorStart=\"pink\" colorEnd=\"white\" />\n      </mesh>\n      <mesh geometry={nodes.lampLightL.geometry} material-color=\"#f0bf94\" position={[0.89, 1.07, -0.14]} scale={[0.07, 0.11, 0.07]} />\n      <mesh geometry={nodes.lampLightR.geometry} material-color=\"#f0bf94\" position={[-0.98, 1.07, -0.14]} scale={[-0.07, 0.11, 0.07]} />\n      {/* Scene objects */}\n      <mesh geometry={nodes.baked.geometry} position={[0.9, 0.34, -1.47]} rotation={[0, 0.14, 0]}>\n        <meshBasicMaterial map={bakedTexture} map-flipY={false} />\n      </mesh>\n    </group>\n  )\n}\n\nuseGLTF.preload('/portal-2.glb')\n","import * as THREE from 'three'\nimport { extend } from '@react-three/fiber'\n\nexport default class FireflyMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        uTime: { value: 0 },\n        uColor: { value: new THREE.Color('white') },\n        uPixelRatio: { value: Math.min(window.devicePixelRatio, 2) },\n        uSize: { value: 150 },\n      },\n      vertexShader: `\n      uniform float uPixelRatio;\n      uniform float uSize;\n      uniform float uTime;\n      attribute float aScale;    \n      void main() {\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        modelPosition.y += sin(uTime + modelPosition.x * 100.0) * aScale * 0.2;\n        modelPosition.z += cos(uTime + modelPosition.x * 100.0) * aScale * 0.2;\n        modelPosition.x += cos(uTime + modelPosition.x * 100.0) * aScale * 0.2;\n        vec4 viewPosition = viewMatrix * modelPosition;\n        vec4 projectionPostion = projectionMatrix * viewPosition;    \n        gl_Position = projectionPostion;\n        gl_PointSize = uSize * aScale * uPixelRatio;\n        gl_PointSize *= (1.0 / - viewPosition.z);\n      }`,\n      fragmentShader: `\n      uniform vec3 uColor;\n      void main() {\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n        float strength = 0.05 / distanceToCenter - 0.1;\n        gl_FragColor = vec4(uColor, strength);\n      }`,\n    })\n  }\n\n  get time() {\n    return this.uniforms.uTime.value\n  }\n\n  set time(v) {\n    this.uniforms.uTime.value = v\n  }\n}\n\nextend({ FireflyMaterial })\n","import * as THREE from 'three'\nimport { useRef, useMemo } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport '../shaders/FireflyMaterial'\n\nexport default function Fireflies({ count = 40 }) {\n  const shader = useRef()\n  const [positionArray, scaleArray] = useMemo(() => {\n    const positionArray = new Float32Array(count * 3)\n    const scaleArray = new Float32Array(count)\n    for (let i = 0; i < count; i++) {\n      new THREE.Vector3((Math.random() - 0.5) * 4, Math.random() * 1.5, (Math.random() - 0.5) * 4).toArray(positionArray, i * 3)\n      scaleArray[i] = Math.random()\n    }\n    return [positionArray, scaleArray]\n  }, [count])\n  useFrame((state, delta) => (shader.current.time += delta / 2))\n  return (\n    <points key={count}>\n      <bufferGeometry>\n        <bufferAttribute attachObject={['attributes', 'position']} count={count} array={positionArray} itemSize={3} />\n        <bufferAttribute attachObject={['attributes', 'aScale']} count={count} array={scaleArray} itemSize={1} />\n      </bufferGeometry>\n      <fireflyMaterial ref={shader} transparent depthWrite={false} />\n    </points>\n  )\n}\n","import { Suspense } from 'react'\nimport { OrbitControls } from '@react-three/drei'\nimport { Canvas } from '@react-three/fiber'\nimport Model from './components/Model'\nimport Fireflies from './components/Fireflies'\n\nexport default function App() {\n  return (\n    <Suspense fallback={<span>loading...</span>}>\n      <Canvas dpr={[1, 2]} camera={{ fov: 45, position: [-4, 2, -4] }}>\n        <color attach=\"background\" args={['#1e2243']} />\n        <Fireflies count={50} />\n        <Model />\n        <OrbitControls />\n      </Canvas>\n    </Suspense>\n  )\n}\n","import { render } from 'react-dom'\nimport './styles.css'\nimport App from './App'\n\nrender(<App />, document.getElementById('root'))\n"],"sourceRoot":""}